---------******************************************************SQL CASE STUDY- 1************************************************************-------------

--Problem Statement:

/* You are a database administrator. You want to use the data to answer a few questions about your customers, especially about the sales and 
profit coming from different states, money spent in marketing and various other factorssuchas COGS (Cost of Goods Sold), budget profit etc.
You plan on using these insights to help find out which items are being sold the most. You have been provided with the sample of the 
overall customer data due to privacy issues. But you hope that these samples are enough for you to write fully functioning SQL queries 
to help answer the questions.*/

--Dataset:

/* The 3 key datasets for this case study:

-- 1) FactTable:
The Fact Table has 14 columns mentioned below and 4200rows. Date, ProductID, Profit, Sales, Margin, COGS, Total Expenses, Marketing, 
Inventory, Budget Profit, Budget COGS, Budget Margin, Budget Sales, and Area Code.
Note: COGS stands for Cost of Goods Sold

-- 2) ProductTable: 
The ProductTable has four columns named Product Type, Product, ProductID, and Type. It has 13 rows which can be broken down into further 
details to retrieve the information mentioned in the FactTable.

-- 3) LocationTable:
Finally, the LocationTable has 156 rows and follows a similar approach to ProductTable. It has four columns named Area Code, State, Market,
and Market Size.*/


--Import CSV file in Database in SQL Server

USE [MandatoryAssignments]
GO

SELECT [Date]
      ,[ProductId]
      ,[Profit]
      ,[Sales]
      ,[Margin]
      ,[COGS]
      ,[Total_Expenses]
      ,[Marketing]
      ,[Inventory]
      ,[Budget_Profit]
      ,[Budget_COGS]
      ,[Budget_Margin]
      ,[Budget_Sales]
      ,[Area_Code]
  FROM [dbo].[fact]

GO

-- TO VIEW MENTION TABLES

SELECT * FROM FACT1
SELECT * FROM PRODUCT
SELECT * FROM LOCATION


--Tasks to be performed:

--1. Display the number of states present in the LocationTable.
Solution-->
SELECT COUNT(DISTINCT State) AS Number_of_States
FROM Location;

--2. How many products are of regular type?
Solution-->
SELECT COUNT(*) AS Regular_Product_Count
FROM Product
WHERE Type = 'Regular';

--3. How much spending has been done on marketing of product ID 1?
Solution-->
SELECT SUM(Marketing) AS Total_Marketing_Spending
FROM Fact1
WHERE ProductID = 1;

--4. What is the minimum sales of a product?
Solution-->
SELECT MIN(Sales) AS Minimum_Sales
FROM Fact1;

--5. Display the max Cost of Good Sold (COGS). 
Solution-->
SELECT MAX(COGS) AS Max_COGS
FROM Fact1;

--6. Display the details of the product where product type is coffee.
Solution-->
SELECT *
FROM Product
WHERE Product_Type = 'Coffee';

--7. Display the details where total expenses are greater than 40. 
Solution-->
SELECT *
FROM Fact1
WHERE Total_Expenses > 40;

--8. What is the average sales in area code 719?
Solution-->
SELECT AVG(Sales) AS Average_Sales
FROM Fact1
WHERE Area_Code = 719;

--9. Find out the total profit generated by Colorado state.
Solution-->
SELECT SUM(Profit) AS Total_Profit
FROM Fact1
WHERE Area_Code IN (SELECT Area_Code FROM Location WHERE State = 'Colorado');

--10. Display the average inventory for each product ID. 
Solution-->
SELECT ProductID, AVG(Inventory) AS Average_Inventory
FROM Fact1
GROUP BY ProductID;

--11. Display state in a sequential order in a Location Table. 
Solution-->
SELECT State
FROM Location
ORDER BY State;

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
Solution-->
SELECT ProductID, AVG(Budget_COGS) AS Average_Budget
FROM Fact1
GROUP BY ProductID
HAVING AVG(Budget_Margin) > 100;

--13. What is the total sales done on date 2010-01-01?
Solution-->
SELECT SUM(Sales) AS Total_Sales
FROM Fact1
WHERE Date = '2010-01-01';

--14. Display the average total expense of each product ID on an individual date. 
Solution-->
SELECT Date, ProductID, AVG(Total_Expenses) AS Average_Total_Expenses
FROM Fact1
GROUP BY Date, ProductID;

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
Solution-->
SELECT F.Date, F.ProductID, P.Product_Type, P.Product, F.Sales, F.Profit, L.State, F.Area_Code
FROM Fact1 F
JOIN Product P ON F.ProductID = P.ProductID
JOIN Location L ON F.Area_Code = L.Area_Code;

--16. Display the rank without any gap to show the sales wise rank. 
Solution-->
SELECT Date, ProductID, Sales,
       DENSE_RANK() OVER (ORDER BY Sales) AS Sales_Rank
FROM Fact1;

--17. Find the state wise profit and sales. 
Solution-->
SELECT L.State, SUM(F.Profit) AS Total_Profit, SUM(F.Sales) AS Total_Sales
FROM Fact1 F
JOIN Location L ON F.Area_Code = L.Area_Code
GROUP BY L.State;

--18. Find the state wise profit and sales along with the productname. 
Solution-->
SELECT L.State, P.Product, SUM(F.Profit) AS Total_Profit, SUM(F.Sales) AS Total_Sales
FROM Fact1 F
JOIN Location L ON F.Area_Code = L.Area_Code
JOIN Product P ON F.ProductID = P.ProductID
GROUP BY L.State, P.Product; 

--19. If there is an increase in sales of 5%, calculate the increased sales.
Solution-->
SELECT Date, ProductID, Sales,
       CASE
           WHEN Sales > (Sales * 0.05) THEN Sales - (Sales * 0.05)
           ELSE 0
       END AS Increased_Sales
FROM Fact1;

--20. Find the maximum profit along with the product ID and product type.
Solution-->
SELECT F.ProductID, P.Product_Type, MAX(F.Profit) AS Max_Profit
FROM Fact1 F
JOIN Product P ON F.ProductID = P.ProductID
GROUP BY F.ProductID, P.Product_Type;

--21. Create a stored procedure to fetch the result according to the product type from Product Table. 
Solution-->
CREATE PROCEDURE usp_fetch_product_by_type
    @product_type VARCHAR(255)
AS
BEGIN
    SELECT productid, product_type, product, type
    FROM Product
    WHERE product_type = @product_type;
END;

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
Solution-->
SELECT Date, ProductID, Total_Expenses,
       CASE
           WHEN Total_Expenses < 60 THEN 'Profit'
           ELSE 'Loss'
       END AS Profit_or_Loss
FROM Fact1;

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order. 
Solution-->
SELECT Date,ProductId,SUM(Sales) AS TotalWeeklySales
FROM fact1
GROUP BY ROLLUP(Date,ProductId)

--24. Apply union and intersection operator on the tables which consist of attribute area code. 
Solution--> 
-- Union of area codes from two tables
SELECT Area_Code FROM Fact1
UNION
SELECT Area_Code FROM Location;

-- Intersection of area codes from two tables
SELECT Area_Code FROM Fact1
INTERSECT
SELECT Area_Code FROM Location;

--25. Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference.
Solution--> 
CREATE FUNCTION FetchProductType (@productType NVARCHAR(255))
RETURNS TABLE
AS
RETURN
(
    SELECT productid, product_type, product, type
    FROM product
    WHERE product_type = @productType
	)

--26. Change the product type from coffee to tea where product ID is 1 and undo it. 
Solution-->
--change the product type from coffee to tea
UPDATE Product
SET Product_Type = 'Tea'
WHERE ProductID = 1;
--To undo the change
UPDATE Product
SET Product_Type = 'Coffee'
WHERE ProductID = 1;

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
Solution-->
SELECT Date, ProductID, Sales
FROM Fact1
WHERE Total_Expenses BETWEEN 100 AND 200;

--28. Delete the records in the Product Table for regular type. 
Solution-->
DELETE FROM Product WHERE Type = 'Regular';

--29. Display the ASCII value of the fifth character from the columnProduct.
Solution-->
SELECT Product, ASCII(SUBSTRING(Product, 5, 1)) AS Fifth_Character_ASCII
FROM Product;

---------******************************************************THANK YOU****************************************************************------------


                                                           
